import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import styled from "styled-components";

// TODOs
// add note to docs about needing to sometimes hide / reshow component to show updated styles

// Define type of property
interface Props {
    styleSet: string; // new
    disabledInput: boolean; // new
    disabledOpacity: number; // new
    fullHeight: boolean; // new
    fullWidth: boolean; // new
    options: string;
    separator: string;
    placeholder: boolean;
    placeholderText: string;
    fontSize: number;
    fontWeight: string; // new
    customFont: boolean;
    customFontFamily: string;
    textColor: string;
    placeholderColor: string;
    iconColor: string;
    customIcon: boolean;
    icon: string;
    iconSize: number;
    paddingPerFontSize: boolean; // new
    paddingPerSide: boolean;
    paddingNaturalFactor: number;
    padding: number;
    paddingTop: number;
    paddingRight: number;
    paddingBottom: number;
    paddingLeft: number;
    borderWidth: number;
    borderColor: string;
    borderColorHover: string; // new
    borderColorFocus: string;
    borderRadius: number;
    useBackground: boolean; // new
    bgColor: string;
    bgColorHover: string; // new
    bgColorFocus: string; // new
    boxShadow: boolean;
    boxShadowColor: string; // new
    boxShadowBlur: number; // new
    boxShadowOffset: number; // new
    boxShadowSpread: number; // new
    transitionSpeed: number; // new
    tabIndex: number; // new
}

export class Select extends React.Component<Props> {

    // Set default properties
    static defaultProps = {
        // UI Control Groups
        styleSet: "1",
        // Disabled?
        disabledInput: false,
        disabledOpacity: .6,
        // Size
        width: 240,
        height: 48,
        fullWidth: true,
        fullHeight: true,
        // Options
        options: "Option One, Option Two, Option Three, Option Four",
        separator: ",",
        // Text
        fontSize: 16,
        fontWeight: '400',
        customFont: false,
        textColor: "#000",
        placeholder: true,
        placeholderText: "Select an Option",
        placeholderColor: "#999",
        // Icon
        iconColor: "#666",
        customIcon: false,
        icon: "",
        iconSize: .7,
        // Padding
        paddingPerFontSize: true,
        paddingPerSide: true,
        paddingNaturalFactor: 1,
        padding: 16,
        paddingTop: 12,
        paddingRight: 16,
        paddingBottom: 12,
        paddingLeft: 16,
        // Border
        borderWidth: 1,
        borderColor: "rgba(0,0,0,0.2)",
        borderRadius: 2,
        borderColorHover: "#09F",
        borderColorFocus: "#06F",
        // Background
        useBackground: true,
        bgColor: "#FFF",
        bgColorHover: "#FFF",
        bgColorFocus: "#FFF",
        // Shadow
        boxShadow: true,
        // Transition
        transitionSpeed: .2,
        // Misc
        tabIndex: 0,
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        disabledInput: {
            type: ControlType.Boolean,
            title: "Disabled",
            enabledTitle: "Yes",
            disabledTitle: "No",
        },
        disabledOpacity: {
            type: ControlType.Number,
            title: ".   opacity",
            min: 0,
            max: 1,
            step: .1,
            hidden: (props) => props.disabledInput == false
        },
        styleSet: {
            type: ControlType.Enum,
            title: "Settings",
            options: ["1", "2", "3"],
            optionTitles: ["** Content **", "** Select **", "** Icon **"],
        },
        fontSize: {
            type: ControlType.Number,
            title: ".   size",
            min: 1,
            unit: "px",
            hidden: (props) => props.styleSet !== "1"
        },
        fontWeight: {
            type: ControlType.Enum,
            title: ".   weight",
            options: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
            // optionTitles: ["Thin", "Extra Light", "Light", "Normal", "Medium", "Semi Bold", "Bold", "Extra Bold", "Heavy"]
            hidden: (props) => props.styleSet !== "1"
        },
        customFont: {
            type: ControlType.Boolean,
            title: ".   font",
            enabledTitle: "Custom",
            disabledTitle: "System",
            hidden: (props) => props.styleSet !== "1"
        },
        customFontFamily: {
            type: ControlType.String,
            title: ".   fontstack",
            hidden: (props) => props.styleSet !== "1" || props.customFont == false
        },
        options: {
            type: ControlType.String,
            title: "Options",
            hidden: (props) => props.styleSet !== "1"
        },
        separator: {
            type: ControlType.String,
            title: ".   separator",
            hidden: (props) => props.styleSet !== "1"
        },
        textColor: {
            type: ControlType.Color,
            title: ".   color",
            hidden: (props) => props.styleSet !== "1"
        },
        placeholder: {
            type: ControlType.Boolean,
            title: "Placeholder",
            hidden: (props) => props.styleSet !== "1"
        },
        placeholderText: {
            type: ControlType.String,
            title: ".   text",
            hidden: (props) => props.styleSet !== "1" || props.placeholder == false
        },
        fullWidth: {
            type: ControlType.Boolean,
            title: "Width",
            enabledTitle: "100%",
            disabledTitle: "Natural",
            hidden: (props) => props.styleSet !== "2"
        },
        fullHeight: {
            type: ControlType.Boolean,
            title: "Height",
            enabledTitle: "100%",
            disabledTitle: "Natural",
            hidden: (props) => props.styleSet !== "2"
        },
        paddingPerFontSize: {
            type: ControlType.Boolean,
            title: "Padding",
            enabledTitle: 'Font Size',
            disabledTitle: 'Literal',
            hidden: (props) => props.styleSet !== "2" || props.fullWidth == true && props.fullHeight == true
        },
        paddingNaturalFactor: {
            type: ControlType.Number,
            title: ".   factor",
            step: .1,
            unit: "em",
            hidden: (props) => props.styleSet !== "2" || props.paddingPerFontSize == false || props.fullWidth == true && props.fullHeight == true
        },
        padding: {
            type: ControlType.FusedNumber,
            toggleKey: "paddingPerSide",
            toggleTitles: ["All Sides", "Per Side"],
            valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
            valueLabels: ["T", "R", "B", "L"],
            min: 0,
            title: ".   offsets",
            hidden: (props) => props.styleSet !== "2" || props.paddingPerFontSize == true || props.fullWidth == true && props.fullHeight == true
        },
        borderWidth: {
            type: ControlType.Number,
            title: "Border",
            min: 0,
            max: 6,
            step: 1,
            displayStepper: true,
            unit: "px",
            hidden: (props) => props.styleSet !== "2"
        },
        borderColor: {
            type: ControlType.Color,
            title: ".   default",
            hidden: (props) => props.styleSet !== "2" || props.borderWidth <= 0
        },
        borderColorHover: {
            type: ControlType.Color,
            title: ".   hover",
            hidden: (props) => props.styleSet !== "2" || props.borderWidth <= 0
        },
        borderColorFocus: {
            type: ControlType.Color,
            title: ".   hover",
            hidden: (props) => props.styleSet !== "2" || props.borderWidth <= 0
        },
        borderRadius: {
            type: ControlType.Number,
            title: ".   radius",
            min: 0,
            displayStepper: true,
            unit: "px",
            hidden: (props) => props.styleSet !== "2"
        },
        useBackground: {
            type: ControlType.Boolean,
            title: "Background",
            enabledTitle: "Yes",
            disabledTitle: "No",
            hidden: (props) => props.styleSet !== "2"
        },
        bgColor: {
            type: ControlType.Color,
            title: ".   default",
            hidden: (props) => props.styleSet !== "2" || props.useBackground == false
        },
        bgColorHover: {
            type: ControlType.Color,
            title: ".   hover",
            hidden: (props) => props.styleSet !== "2" || props.useBackground == false
        },
        bgColorFocus: {
            type: ControlType.Color,
            title: ".   focus",
            hidden: (props) => props.styleSet !== "2" || props.useBackground == false
        },
        transitionSpeed: {
            type: ControlType.Number,
            title: "Transition",
            min: 0,
            max: 6,
            step: 0.1,
            unit: "s",
            hidden: (props) => props.styleSet !== "2"
        },
        boxShadow: {
            type: ControlType.Boolean,
            title: "Shadow",
            enabledTitle: "Yes",
            disabledTitle: "No",
            hidden: (props) => props.styleSet !== "2"
        },
        boxShadowColor: {
            type: ControlType.Color,
            title: ".   color",
            hidden: (props) => props.styleSet !== "2" || props.boxShadow == false
        },
        boxShadowBlur: {
            type: ControlType.Number,
            title: ".   blur",
            min: 0,
            max: 100,
            unit: "px",
            hidden: (props) => props.styleSet !== "2" || props.boxShadow == false
        },
        boxShadowOffset: {
            type: ControlType.Number,
            title: ".   offset",
            min: -50,
            max: 50,
            unit: "px",
            hidden: (props) => props.styleSet !== "2" || props.boxShadow == false
        },
        boxShadowSpread: {
            type: ControlType.Number,
            title: ".   spread",
            min: -50,
            max: 50,
            unit: "px",
            hidden: (props) => props.styleSet !== "2" || props.boxShadow == false
        },
        tabIndex: {
            type: ControlType.Number,
            title: "Tab Index",
            displayStepper: true,
            hidden: (props) => props.styleSet !== "2"
        },
        customIcon: {
            type: ControlType.Boolean,
            title: ".   icon",
            enabledTitle: "Custom",
            disabledTitle: "Default",
            hidden: (props) => props.styleSet !== "3"
        },
        icon: {
            type: ControlType.File,
            allowedFileTypes: ["png", "jpg", "svg"],
            title: ".   icon art",
            hidden: (props) => props.styleSet !== "3" || props.customIcon == false
        },
        iconColor: {
            type: ControlType.Color,
            title: ".   color",
            hidden: (props) => props.styleSet !== "3"
        },
        iconSize: {
            type: ControlType.Number,
            title: ".   size",
            min: 0,
            max: 5,
            step: .1,
            hidden: (props) => props.styleSet !== "3"
        },
    }

    // https://www.filamentgroup.com/lab/select-css.html
    StyledSelect = styled.select`
        -moz-appearance: none;
        -webkit-Appearance: none;
        appearance: none;
        display: block;
        box-sizing: border-box;
        font-weight: ${this.props.fontWeight};
        line-height: 1.2;
        border-style: solid;
        margin: 0;
        background-color: ${this.props.useBackground ? this.props.bgColor : "transparent"};
        background-image: ${this.props.customIcon ? "url('" + this.props.icon + "'), " + (this.props.useBackground ? "linear-gradient(to bottom, " + this.props.bgColor + " 0%, " + this.props.bgColor + " 100%)" : "transparent") : "url(\"data:image/svg+xml;charset=utf8,%3Csvg width='14' height='8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1l6 6 6-6' stroke='" + encodeURIComponent(this.props.iconColor) + "' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E\"), " + (this.props.useBackground ? "linear-gradient(to bottom, " + this.props.bgColor + " 0%, " + this.props.bgColor + " 100%)" : "transparent")};
        background-repeat: no-repeat, repeat;
        transition: all ${this.props.transitionSpeed}s;
        &::-ms-expand {
            display: none;
        }
        &:hover {
            border-color: ${this.props.borderColorHover} !important;
            background-color: ${this.props.useBackground ? this.props.bgColorHover : 'transparent'} !important;
            background-image: ${this.props.customIcon ? "url('" + this.props.icon + "'), " + (this.props.useBackground ? "linear-gradient(to bottom, " + this.props.bgColorHover + " 0%, " + this.props.bgColorHover + " 100%)" : "transparent") : "url(\"data:image/svg+xml;charset=utf8,%3Csvg width='14' height='8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1l6 6 6-6' stroke='" + encodeURIComponent(this.props.iconColor) + "' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E\"), " + (this.props.useBackground ? "linear-gradient(to bottom, " + this.props.bgColorHover + " 0%, " + this.props.bgColorHover + " 100%)" : "transparent")};
        }
        &:focus {
            border-color: ${this.props.borderColorFocus} !important;
            background-color: ${this.props.useBackground ? this.props.bgColorFocus : 'transparent'} !important;
            background-image: ${this.props.customIcon ? "url('" + this.props.icon + "'), " + (this.props.useBackground ? "linear-gradient(to bottom, " + this.props.bgColorFocus + " 0%, " + this.props.bgColorFocus + " 100%)" : "transparent") : "url(\"data:image/svg+xml;charset=utf8,%3Csvg width='14' height='8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1l6 6 6-6' stroke='" + encodeURIComponent(this.props.iconColor) + "' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E\"), " + (this.props.useBackground ? "linear-gradient(to bottom, " + this.props.bgColorFocus + " 0%, " + this.props.bgColorFocus + " 100%)" : "transparent")};
            outline: none;
        }
        &[disabled] {
            pointer-events: none;
            opacity: ${this.props.disabledOpacity};
        }
    `

    render() {
        const {
            fullHeight,
            disabledInput,
            paddingPerFontSize,
            paddingPerSide,
            paddingNaturalFactor,
            padding,
            paddingTop,
            paddingRight,
            paddingBottom,
            paddingLeft,
            tabIndex
        } = this.props;

        var optionTitleArray = this.props.options.split(this.props.separator);
        var optionArray = [];

        if (this.props.placeholder) {
            optionArray.push(
                <option key={optionArray.toString()} value="" disabled selected>
                    {this.props.placeholderText}
                </option>
            );
        }
        for (var i = 0; i < optionTitleArray.length; i++) {
            if (optionTitleArray[i] == "") {
                optionTitleArray[i] = "Option";
            }
            optionArray.push(
                <option key={optionArray.toString()} value="">
                    {optionTitleArray[i]}
                </option>
            );
        }

        const paddingTopValue =
            fullHeight ? '0' : (paddingPerFontSize ? `calc(${paddingNaturalFactor - .093}em - 1px)` : (paddingPerSide ? `${paddingTop}px` : `${padding}px`))
        const paddingBottomValue =
            fullHeight ? '0' : (paddingPerFontSize ? `calc(${paddingNaturalFactor - .093}em - 1px)` : (paddingPerSide ? `${paddingBottom}px` : `${padding}px`))
        const paddingRightValue =
            paddingPerFontSize ? `calc(2.5em + ${this.props.iconSize * .3 + "em"})` : (paddingPerSide ? `calc(${paddingRight}px + ${this.props.iconSize * .3 + "em"})` : `calc(${padding}px + ${this.props.iconSize * .3 + "em"})`)
        const paddingLeftValue =
            paddingPerFontSize ? `${paddingNaturalFactor}em` : (paddingPerSide ? `${paddingLeft}px` : `${padding}px`)
        const paddingValue = `${paddingTopValue} ${paddingRightValue} ${paddingBottomValue} ${paddingLeftValue}`

        return (
            <this.StyledSelect
                disabled={disabledInput ? disabledInput : disabledInput}
                tabIndex={tabIndex}
                style={{
                    width: this.props.fullWidth ? "100%" : "auto",
                    height: this.props.fullHeight ? "100%" : "auto",
                    fontSize: this.props.fontSize,
                    fontFamily: this.props.customFont ? this.props.customFontFamily : "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                    color: this.props.textColor,
                    padding: paddingValue,
                    borderWidth: this.props.borderWidth,
                    borderColor: this.props.borderColor,
                    borderRadius: this.props.borderRadius,
                    backgroundPosition: "right " + (this.props.paddingPerFontSize ? '1' : this.props.paddingPerSide ? this.props.paddingRight / 16 : this.props.padding / 16) + "em top 50%, 0 0",
                    backgroundSize: this.props.iconSize + "em auto, 100%",
                    boxShadow: !disabledInput ? (this.props.boxShadow ? " 0 1px 0 1px rgba(0, 0, 0, .04)" : "") : "",
                }}>
                {optionArray}
            </this.StyledSelect>
        );
    }
}
